# Generated by Django 5.1.3 on 2025-05-13 12:40

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0044_remove_employeelanguage_unique_employee_language_and_more"),
        ("suggestions", "0002_auto_20250513_1209"),
        ("vacancies", "0027_experienceschool_experiencecompany"),
    ]

    operations = [
        migrations.CreateModel(
            name="SuggestionGenerationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("suggestions_created", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("is_successful", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Suggestion Generation Log",
                "verbose_name_plural": "Suggestion Generation Logs",
                "ordering": ["-started_at"],
            },
        ),
        migrations.AlterModelOptions(
            name="aisuggestion",
            options={
                "ordering": ["-total_score", "-created_at"],
                "verbose_name": "AI Suggestion",
                "verbose_name_plural": "AI Suggestions",
            },
        ),
        migrations.AlterUniqueTogether(
            name="aisuggestion",
            unique_together={("employee", "vacancy")},
        ),
        migrations.AddField(
            model_name="aisuggestion",
            name="message",
            field=models.TextField(
                default="",
                help_text="Explanation from the LLM about why this match was suggested",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="aisuggestion",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="aisuggestion",
            name="qualitative_score",
            field=models.FloatField(
                help_text="Score based on qualitative data from LLM (0-100)",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="aisuggestion",
            name="quantitative_score",
            field=models.FloatField(
                help_text="Score based on quantitative data (0-100)",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="aisuggestion",
            name="total_score",
            field=models.FloatField(
                help_text="Combined score from quantitative and qualitative analysis",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.CreateModel(
            name="SuggestionWeight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("distance", "Distance"),
                            ("availability", "Availability"),
                            ("languages", "Languages"),
                            ("functions", "Functions"),
                            ("hard_skills", "Hard Skills"),
                            ("soft_skills", "Soft Skills"),
                            ("biography", "Biography"),
                            ("company_bio", "Company Biography"),
                            ("education", "Education"),
                            ("interests", "Interests"),
                            ("description", "Vacancy Description"),
                            ("questions", "Vacancy Questions"),
                        ],
                        help_text="The field this weight applies to",
                        max_length=50,
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        help_text="Weight percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "mastery_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        help_text="If set, this weight only applies to vacancies with this mastery level",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("quantitative", "Quantitative"),
                            ("qualitative", "Qualitative"),
                        ],
                        help_text="Whether this weight applies to quantitative or qualitative scoring",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Suggestion Weight",
                "verbose_name_plural": "Suggestion Weights",
                "ordering": ["name"],
                "unique_together": {("name", "mastery_level")},
            },
        ),
        migrations.DeleteModel(
            name="MasteryWeight",
        ),
        migrations.DeleteModel(
            name="MatchingWeight",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="availability_score",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="company",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="distance_score",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="explanation",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="function_score",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="is_approved",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="language_score",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="moderator_notes",
        ),
        migrations.RemoveField(
            model_name="aisuggestion",
            name="skills_score",
        ),
    ]
