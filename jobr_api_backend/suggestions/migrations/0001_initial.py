# Generated by Django 5.1.3 on 2025-05-13 12:03

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0042_alter_company_sector"),
        ("vacancies", "0027_experienceschool_experiencecompany"),
    ]

    operations = [
        migrations.CreateModel(
            name="MatchingWeight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "weight",
                    models.FloatField(
                        help_text="Weight value between 0 and 100",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "is_quantitative",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this weight is for quantitative or qualitative (LLM) matching",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AISuggestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantitative_score",
                    models.FloatField(
                        help_text="Score based on quantitative factors (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "qualitative_score",
                    models.FloatField(
                        help_text="Score based on LLM analysis (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "total_score",
                    models.FloatField(
                        help_text="Combined total score (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("distance_score", models.FloatField(blank=True, null=True)),
                ("availability_score", models.FloatField(blank=True, null=True)),
                ("language_score", models.FloatField(blank=True, null=True)),
                ("function_score", models.FloatField(blank=True, null=True)),
                ("skills_score", models.FloatField(blank=True, null=True)),
                (
                    "explanation",
                    models.TextField(
                        help_text="AI-generated explanation for why this match was suggested"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_approved",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this suggestion has been approved by moderators",
                    ),
                ),
                (
                    "moderator_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from moderators about this suggestion",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_suggestions",
                        to="accounts.company",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_suggestions",
                        to="accounts.employee",
                    ),
                ),
                (
                    "vacancy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_suggestions",
                        to="vacancies.vacancy",
                    ),
                ),
            ],
            options={
                "ordering": ["-total_score", "-created_at"],
                "unique_together": {("employee", "vacancy", "created_at")},
            },
        ),
        migrations.CreateModel(
            name="MasteryWeight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mastery_level",
                    models.CharField(
                        choices=[
                            ("None", "none"),
                            ("Beginner", "beginner"),
                            ("Intermediate", "intermediate"),
                            ("Advanced", "advanced"),
                            ("Expert", "expert"),
                        ],
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        help_text="Weight value between 0 and 100",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "matching_weight",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="suggestions.matchingweight",
                    ),
                ),
            ],
            options={
                "unique_together": {("mastery_level", "matching_weight")},
            },
        ),
    ]
